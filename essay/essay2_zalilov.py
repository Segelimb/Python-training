print("Сочинение на тему: Условные операторы.")
print("Сегодня на паре по основам программирования на Python я познакомился сважными операциями,")
print("которые позволяют программе выполнять разные действия в зависимости от того,")
print("является ли условие истинным (True) или ложным (False).")
print('Основной инструмент для этого — оператор if. Он проверяет условие и, если оно истинно, выполняет блок кода под ним.')
print('Для альтернативных путей используются elif (сокращение от "else if") и else(иначе).')
print()
print("Пример:")
text = """if point >= 90:
    print("Отлично!")
elif point >= 70:
    print("Хорошо")
else:
    print("Нужно подтянуть")"""
print(text)
print()
print("Данный код сравнивает значение point и выводит в консоль различные сообщения в зависимости от значения.")
print("Без условных операторов программы были бы линейными и не могли бы адаптироваться к разным ситуациям.")
print("Таким образом, if, elif и else — это интеллект программы, позволяющий ей быть гибкой и умной.")
print()
text2 = """Одной из самых мощных возможностей является комбинирование условий с помощью логических операторов and (И),
or (ИЛИ) и not (НЕ). Они позволяют создавать сложные проверки:
- and требует выполнения всех условий одновременно
- or требует выполнения хотя бы одного из условий
- not инвертирует результат условия"""
print(text2)
print()
print("Пример:")
print()
text3 = """if not(age < 18) and (passport or rights):
    print("Доступ разрешен")
else:
    print("Доступ запрещен")"""
print(text3)
print()
print("Условие в примере проверяет что бы возраст был НЕ меньше 18,")
print("а так же имелись водительские права или паспорт.")
print()
text4 = """Без условных операторов программы были бы линейными и не могли бы адаптироваться к разным ситуациям.
А логические операторы and, or, not делают этот инструмент по-настоящему гибким, позволяя описывать сложную логику принятия решений.
Таким образом, условные операции — это интеллект программы, позволяющий ей быть еще более адаптивной и умной."""
print(text4)
print()